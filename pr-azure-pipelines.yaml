# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

name: $(version).$(Build.BuildId)$(buildPipelineSuffix)

# trigger:
# - master
pr:
  branches:
    include:
    - master  # '*'' must single quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: ubuntu-latest

steps:
  - script: |
      echo "##vso[build.addbuildtag]version=$(version).$(Build.BuildId)$(buildPipelineSuffix)"
    displayName: 'Set Build Instance Number'

  - task: NodeTool@0
    inputs:
      versionSpec: '10.x'
    displayName: 'Install Node.js'

  - task: ArtifactoryNpm@2
    inputs:
      command: 'install'
      artifactoryService: 'girocicd.npm.remote.jfrog.io'
      sourceRepo: 'dailyweb-npm-remote'
      workingFolder: '/'
      collectBuildInfo: true
      threads: '1'
      buildName: '$(Build.DefinitionName)'
      buildNumber: '$(Build.BuildNumber)'
  # - script: |
  #     npm install
  #   displayName: 'npm install'

  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'girocicd.sonarcloud.io'
      organization: 'spoulingiro000'
      scannerMode: 'CLI'
      configMode: 'manual'
      cliProjectKey: 'SPoulinGiro000_hello_jest'
      cliProjectName: 'SPoulinGiro000_hello_jest'
      cliProjectVersion: '$(Build.BuildNumber)'
      cliSources: '.'
      extraProperties: |
        # Additional properties that will be passed to the scanner, 
        # Put one key=value per line, example:
        # sonar.exclusions=**/*.bin
        sonar.sources=.
        sonar.testExecutionReportPaths=reports/test-reporter.xml
        sonar.javascript.lcov.reportPaths=reports/lcov.info
        sonar.test.inclusions=**/*.test.js
        sonar.exclusions=node_modules/**/*, reports/**/*
        sonar.language=js
        # sonar.sourceEncoding=UTF-8
        #sonar.host.url=https://sonarcloud.io

  - script: |
      npm run build
      ls -la
    displayName: 'npm build'

  - task: ArtifactoryXrayScan@1
    inputs:
      artifactoryService: 'girocicd.npm.remote.jfrog.io'
      buildName: '$(Build.DefinitionName)'
      buildNumber: '$(Build.BuildNumber)'
      allowFailBuild: true

  - script: |
      npm run test
      ls -la
    displayName: 'npm test'

  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'

  - task: ArchiveFiles@2
    condition: always()
    displayName: 'Archive files'
    inputs:
      rootFolderOrFile: '$(Build.Repository.LocalPath)'
      includeRootFolder: True
      verbose: true

  - task: PublishBuildArtifacts@1
    displayName: 'Publish artifact'
    condition: succeededOrFailed()